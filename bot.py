import os
import logging
import httpx
from typing import Dict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from telegram.error import BadRequest, HTTPBadRequest

# ========= ENV =========
BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
BACKEND_ROOT = (os.getenv("BACKEND_ROOT") or "").rstrip("/")

# ========= LOG =========
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tg-bot")

if not BOT_TOKEN:
    log.warning("BOT_TOKEN –ø—É—Å—Ç ‚Äî –±–æ—Ç –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç.")
if not BACKEND_ROOT:
    log.warning("BACKEND_ROOT –ø—É—Å—Ç ‚Äî train/upload/status/generate —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç.")

# ========= APP =========
# –ö–õ–Æ–ß–ï–í–û–ï: –Ω–µ —Å–æ–∑–¥–∞—ë–º Updater (–∏–Ω–∞—á–µ –ø–∞–¥–∞–µ—Ç –Ω–∞ Py 3.13).
tg_app = (
    Application
    .builder()
    .token(BOT_TOKEN)
    .updater(None)   # <‚Äî –≤–∞–∂–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    .build()
)

# –§–ª–∞–≥/–∑–∞–º–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ main.py)
_init_started = False
async def ensure_initialized() -> None:
    global _init_started
    if getattr(tg_app, "_initialized", False):
        return
    if _init_started:
        return
    _init_started = True
    await tg_app.initialize()
    await tg_app.start()
    log.info("‚úÖ Telegram Application initialized & started (webhook mode)")

# ========= STATE =========
user_jobs: Dict[int, str] = {}   # user_id -> job_id

# ========= UI =========
def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="upload")],
        [InlineKeyboardButton("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", callback_data="photos_done")],
        [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="status")],
        [InlineKeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="generate")],
    ])

def kb_upload_done() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", callback_data="photos_done")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
    ])

async def safe_edit(q, text: str, reply_markup=None, parse_mode=None):
    try:
        await q.edit_message_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except BadRequest as e:
        if "Message is not modified" not in str(e):
            raise

# ========= HANDLERS =========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç—ã.",
        reply_markup=kb_main()
    )

async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not BACKEND_ROOT:
        await update.message.reply_text("‚ö†Ô∏è BACKEND_ROOT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    tgf = await update.message.photo[-1].get_file()
    local_path = await tgf.download_to_drive()

    async with httpx.AsyncClient(timeout=60) as cl:
        with open(local_path, "rb") as fp:
            r = await cl.post(
                f"{BACKEND_ROOT}/api/upload_photo",
                data={"user_id": update.effective_user.id},
                files={"file": ("photo.jpg", fp, "image/jpeg")},
            )
            r.raise_for_status()

    await update.message.reply_text(
        "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã¬ª, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.",
        reply_markup=kb_upload_done()
    )

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if q.data == "upload":
        await safe_edit(
            q,
            "–ü—Ä–∏—à–ª–∏—Ç–µ 10‚Äì30 —Ñ–æ—Ç–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=kb_upload_done()
        )
        return

    if q.data == "photos_done":
        if not BACKEND_ROOT:
            await safe_edit(q, "‚ö†Ô∏è BACKEND_ROOT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=kb_main())
            return

        # 1) –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–æ—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –ª–µ–∂–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        try:
            async with httpx.AsyncClient(timeout=20) as cl:
                rr = await cl.get(f"{BACKEND_ROOT}/api/debug/has_photos/{uid}")
                rr.raise_for_status()
                d = rr.json()
                if not d.get("has_photos"):
                    await safe_edit(
                        q,
                        "‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n–ü—Ä–∏—à–ª–∏—Ç–µ 10‚Äì30 —Ñ–æ—Ç–æ (–∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º, —Ä–∞–∑–Ω—ã–π —Ä–∞–∫—É—Ä—Å) –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã¬ª.",
                        reply_markup=kb_upload_done()
                    )
                    return
        except Exception:
            # –¥–∞–∂–µ –µ—Å–ª–∏ debug-—Ä–æ—É—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å /api/train –∏ –ø–æ–π–º–∞—Ç—å 400
            pass

        # 2) –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ (form-data)
        try:
            async with httpx.AsyncClient(timeout=60) as cl:
                r = await cl.post(f"{BACKEND_ROOT}/api/train", data={"user_id": uid})
            if r.status_code == 400:
                await safe_edit(
                    q,
                    "‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ 10‚Äì30 —Ñ–æ—Ç–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.",
                    reply_markup=kb_upload_done()
                )
                return
            r.raise_for_status()
            data = r.json()
        except httpx.HTTPStatusError as e:
            await safe_edit(q, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e.response.status_code}", reply_markup=kb_main())
            return

        job_id = data.get("job_id")
        if not job_id:
            await safe_edit(q, "‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ –≤–µ—Ä–Ω—É–ª job_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=kb_main())
            return

        user_jobs[uid] = job_id
        await safe_edit(
            q,
            f"üöÄ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!\nID –∑–∞–¥–∞—á–∏: `{job_id}`\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª.",
            reply_markup=kb_main(),
            parse_mode="Markdown"
        )
        return

    if q.data == "status":
        job_id = user_jobs.get(uid)
        if not job_id:
            await safe_edit(q, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.", reply_markup=kb_main())
            return

        if not BACKEND_ROOT:
            await safe_edit(q, "‚ö†Ô∏è BACKEND_ROOT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=kb_main())
            return

        async with httpx.AsyncClient(timeout=60) as cl:
            r = await cl.get(f"{BACKEND_ROOT}/api/status/{job_id}")
            if r.status_code == 404:
                await safe_edit(q, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è?). –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=kb_main())
                return
            r.raise_for_status()
            data = r.json()

        status = data.get("status", "unknown")
        progress = data.get("progress", 0)
        model_id = data.get("model_id") or "‚Äî"
        await safe_edit(
            q,
            f"üìä –°—Ç–∞—Ç—É—Å: *{status}*\n–ü—Ä–æ–≥—Ä–µ—Å—Å: *{progress}%*\n–ú–æ–¥–µ–ª—å: `{model_id}`",
            reply_markup=kb_main(),
            parse_mode="Markdown"
        )
        return

    if q.data == "generate":
        if not BACKEND_ROOT:
            await safe_edit(q, "‚ö†Ô∏è BACKEND_ROOT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=kb_main())
            return
        payload = {
            "user_id": uid,
            "prompt": "studio portrait, cinematic lighting, 85mm, f/1.8, ultra-detailed skin",
            "num_images": 1
        }
        async with httpx.AsyncClient(timeout=120) as cl:
            r = await cl.post(f"{BACKEND_ROOT}/api/generate", json=payload)
            r.raise_for_status()
            data = r.json()

        urls = data.get("images") or []
        if not urls:
            await safe_edit(q, "‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=kb_main())
            return

        await safe_edit(q, "–ì–æ—Ç–æ–≤–æ ‚úÖ –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", reply_markup=kb_main())
        for u in urls:
            await q.message.reply_photo(photo=u)
        return

    if q.data == "back_home":
        await safe_edit(q, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main())
        return

# ========= REGISTER =========
tg_app.add_handler(CommandHandler("start", start))
tg_app.add_handler(MessageHandler(filters.PHOTO, on_photo))
tg_app.add_handler(CallbackQueryHandler(on_button))
