import os
import asyncio
import logging
from fastapi import FastAPI, Request, HTTPException
from telegram import Update
from telegram.error import TelegramError

from bot import tg_app  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Application –∏–∑ bot.py

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("web")

app = FastAPI()

# ENV
BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
# URL —Å–∞–º–æ–≥–æ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render (—É–∫–∞–∂–∏ –≤ Render env, –Ω–∞–ø—Ä–∏–º–µ—Ä https://rep-wug0.onrender.com)
PUBLIC_URL = (os.getenv("PUBLIC_URL") or "").rstrip("/")
# —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø—É—Ç–∏ –≤–µ–±—Ö—É–∫–∞ (—á—Ç–æ–±—ã –ª–µ–≤—ã–µ –Ω–µ –¥–æ–ª–±–∏–ª–∏—Å—å). –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±—ã–º —Å–ª–æ–≤–æ–º
WEBHOOK_SECRET = (os.getenv("WEBHOOK_SECRET") or "hook").strip()

if not BOT_TOKEN:
    log.warning("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

if not PUBLIC_URL:
    log.warning("PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")


@app.on_event("startup")
async def startup_event():
    """
    –°—Ç–∞—Ä—Ç—É–µ–º Telegram Application –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –Ω–∞ /webhook/{WEBHOOK_SECRET}.
    –í–ê–ñ–ù–û: –ù–ï –≤—ã–∑—ã–≤–∞–µ–º run_polling(), —Ç–æ–ª—å–∫–æ initialize/start + set_webhook.
    """
    await tg_app.initialize()
    await tg_app.start()

    if PUBLIC_URL:
        hook_url = f"{PUBLIC_URL}/webhook/{WEBHOOK_SECRET}"
        try:
            await tg_app.bot.delete_webhook(drop_pending_updates=True)
            await tg_app.bot.set_webhook(hook_url, allowed_updates=["message", "callback_query"])
            log.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {hook_url}")
        except TelegramError as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e!r}")
    else:
        log.warning("PUBLIC_URL –ø—É—Å—Ç ‚Äî webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–¥–∞–π PUBLIC_URL –≤ Render ENV.")


@app.on_event("shutdown")
async def shutdown_event():
    try:
        await tg_app.bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await tg_app.stop()
    log.info("üõë Telegram application stopped")


@app.get("/healthz")
async def healthz():
    return {"ok": True}


@app.post(f"/webhook/{{secret}}")
async def webhook(secret: str, request: Request):
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="forbidden")

    data = await request.json()
    update = Update.de_json(data, tg_app.bot)
    await tg_app.process_update(update)
    return {"ok": True}
