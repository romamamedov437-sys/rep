import os
import logging
import httpx
from typing import Dict

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.error import BadRequest

# ---------- ENV ----------
BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
BACKEND_ROOT = (os.getenv("BACKEND_ROOT") or "").rstrip("/")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")
if not BACKEND_ROOT:
    raise RuntimeError("BACKEND_ROOT is not set")

# ---------- LOG ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tg-bot")

# ---------- STATE ----------
user_jobs: Dict[int, str] = {}

# ---------- KEYBOARDS ----------
def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="upload")],
            [InlineKeyboardButton("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", callback_data="photos_done")],
            [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="status")],
            [InlineKeyboardButton("‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="generate")],
        ]
    )

def kb_upload_done() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", callback_data="photos_done")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
        ]
    )

# ---------- UTILS ----------
async def safe_edit(q, text: str, reply_markup=None):
    try:
        await q.edit_message_text(text, reply_markup=reply_markup)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            return
        raise

# ---------- HANDLERS ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ø–æ–º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ, –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç—ã.\n"
        "–ù–∞—á–Ω—ë–º? –ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=kb_main(),
    )

async def on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        file = await update.message.photo[-1].get_file()
        local_path = await file.download_to_drive()

        async with httpx.AsyncClient(timeout=120) as cl:
            with open(local_path, "rb") as fp:
                r = await cl.post(
                    f"{BACKEND_ROOT}/api/upload_photo",
                    data={"user_id": update.effective_user.id},
                    files={"file": ("photo.jpg", fp, "image/jpeg")},
                )
                r.raise_for_status()

        await update.message.reply_text(
            "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã¬ª.",
            reply_markup=kb_upload_done(),
        )
    except Exception as e:
        log.exception("upload failed")
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ: {e}")

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id

    if q.data == "upload":
        await safe_edit(
            q,
            "–ü—Ä–∏—à–ª–∏—Ç–µ 10‚Äì30 —Ñ–æ—Ç–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã¬ª.",
            reply_markup=kb_upload_done(),
        )
        return

    if q.data == "photos_done":
        try:
            async with httpx.AsyncClient(timeout=60) as cl:
                r = await cl.post(f"{BACKEND_ROOT}/api/train", data={"user_id": uid})
                r.raise_for_status()
            data = r.json()
            job_id = data.get("job_id")
            if not job_id:
                await safe_edit(q, "‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ –≤–µ—Ä–Ω—É–ª job_id.", reply_markup=kb_main())
                return
            user_jobs[uid] = job_id
            await safe_edit(
                q,
                f"üöÄ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!\nID –∑–∞–¥–∞—á–∏: `{job_id}`\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª.",
                reply_markup=kb_main(),
            )
        except Exception as e:
            log.exception("train failed")
            await safe_edit(q, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ: {e}", reply_markup=kb_main())
        return

    if q.data == "status":
        job_id = user_jobs.get(uid)
        if not job_id:
            await safe_edit(
                q,
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.",
                reply_markup=kb_main(),
            )
            return
        try:
            async with httpx.AsyncClient(timeout=30) as cl:
                r = await cl.get(f"{BACKEND_ROOT}/api/status/{job_id}")
                if r.status_code == 404:
                    await safe_edit(
                        q,
                        "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è).\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                        reply_markup=kb_main(),
                    )
                    return
                r.raise_for_status()
            data = r.json()
            status = data.get("status", "unknown")
            progress = data.get("progress", 0)
            model_id = data.get("model_id") or "‚Äî"
            await safe_edit(
                q,
                f"üìä –°—Ç–∞—Ç—É—Å: *{status}*\n–ü—Ä–æ–≥—Ä–µ—Å—Å: *{progress}%*\n–ú–æ–¥–µ–ª—å: `{model_id}`",
                reply_markup=kb_main(),
            )
        except Exception as e:
            log.exception("status failed")
            await safe_edit(q, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}", reply_markup=kb_main())
        return

    if q.data == "generate":
        payload = {
            "user_id": uid,
            "prompt": "studio portrait, cinematic lighting, 85mm, f/1.8, ultra-detailed skin",
            "num_images": 1,
        }
        try:
            async with httpx.AsyncClient(timeout=180) as cl:
                r = await cl.post(f"{BACKEND_ROOT}/api/generate", json=payload)
                r.raise_for_status()
            data = r.json()
            urls = data.get("images") or []
            await safe_edit(q, "–ì–æ—Ç–æ–≤–æ ‚úÖ –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", reply_markup=kb_main())
            for u in urls:
                await q.message.reply_photo(photo=u)
        except Exception as e:
            log.exception("generate failed")
            await safe_edit(q, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å: {e}", reply_markup=kb_main())
        return

    if q.data == "back_home":
        await safe_edit(q, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_main())
        return

# ---------- ENTRY ----------
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(CallbackQueryHandler(on_button))

    log.info("ü§ñ Bot is starting (long polling)‚Ä¶")
    # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π, –±–µ–∑ asyncio
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
